//
// For random modes
//
// Description:
//
//
// Author: Yizao Wang <yizao.wang@polytechnique.edu> and Sylvain Gelly <gelly@lri.fr>, (C) 2006
//
// Copyright: See COPYING file that comes with this distribution
//
//
#include "goban_mg.h"
#include "gotools_mg.h"



bool MoGo::Goban::isNewInterestingMoves(const Vector<int> &neighbors, int newMode) const {
  // GoTools::print("gefsd %i\n", newMode);
  const Vector<int> &v=neighbors;
  if (newMode==1) {
    // NOT (EQ Outside V7)
    return neighbors[7]!=3;
  } else if (newMode==2) {
    // (EQ Other V7)
    return neighbors[7]==2;
  } else if (newMode==3) {
    return true;
  } else if (newMode==4) {
    return false;
  } else if (newMode==5) {
    return neighbors[7]==3;
  } else if (newMode==6) {
    return neighbors[7]!=neighbors[6];
  } else if (newMode==7) {
    return (neighbors[7]!=neighbors[6]) || (neighbors[7]==neighbors[1]);
  } else if (newMode==8) {
    return (v[4]!=1 && v[7]==2) || (v[2]!=3 && v[2]==3) || (v[6]!=3 && v[7]==1) || (v[0]==1 && v[3]==2) || (v[3]==3 && v[7]!=1);
  } else if (newMode==9) {
    return (v[6]==0 && v[6]==0 && v[3]==1 && v[2]!=2 && v[7]!=1) || (v[6]!=3 && v[0]!=1 && v[4]!=3 && v[6]!=2 && v[4]!=1) || (v[3]==1 && v[2]!=1 && v[4]!=3 && v[6]==3 && v[6]==2) || (v[0]!=3 && v[0]==3 && v[7]!=2 && v[0]==0 && v[5]!=3) || (v[5]!=3 && v[0]!=2 && v[4]!=1 && v[7]==1 && v[7]!=0);
  } else if (newMode==10) {
    return (v[7]!=3 && v[6]!=0 && v[7]==1 && v[6]!=3 && v[6]==2) || (v[0]!=2 && v[4]!=1 && v[3]!=1 && v[0]==1 && v[0]!=2) || (v[5]==0 && v[7]!=0 && v[2]==0 && v[7]==2 && v[6]!=2) || (v[0]==0 && v[2]==2 && v[4]!=0 && v[5]!=1 && v[7]==1) || (v[6]!=3 && v[4]==2 && v[6]!=2 && v[6]!=2 && v[4]!=1);
  } else if (newMode==11) {
    return (v[7]==1 && v[3]!=2 && v[6]!=3 && v[6]!=1 && v[2]!=1) || (v[5]!=2 && v[5]!=3 && v[3]==0 && v[5]!=0 && v[3]==0) || (v[1]!=2 && v[0]!=0 && v[1]!=2 && v[7]!=1 && v[3]==2) || (v[6]!=3 && v[1]!=3 && v[6]!=2 && v[4]!=1 && v[2]!=3) || (v[4]==2 && v[4]!=1 && v[7]==2 && v[4]!=2 && v[2]==0);
  } else if (newMode==12) {
    return (v[0]==2 && v[4]!=0 && v[4]==0 && v[4]==3 && v[0]!=3) || (v[7]==0 && v[7]!=2 && v[0]==1 && v[6]!=0 && v[4]==1) || (v[3]!=0 && v[0]!=0 && v[6]!=2 && v[1]!=2 && v[2]!=0) || (v[4]!=3 && v[0]==0 && v[7]!=0 && v[4]!=1 && v[7]!=3) || (v[1]==2 && v[2]==3 && v[2]==2 && v[4]==0 && v[3]==3);
  }  else if (newMode==13) {
    return (v[3]!=1 && v[4]!=0 && v[4]==0 && v[4]==3 && v[0]!=3) || (v[7]==0 && v[2]==3 && v[0]==1 && v[6]!=0 && v[4]==1) || (v[3]!=0 && v[0]!=0 && v[7]!=2 && v[1]!=2 && v[2]!=0) || (v[7]!=3 && v[0]==0 && v[7]!=0 && v[4]!=1 && v[7]!=3) || (v[1]==2 && v[2]==3 && v[2]==2 && v[4]==0 && v[2]==0);
  } else if (newMode==14) {
    return (v[6]!=6 && v[7]!=7 && v[5]!=6) || (v[1]!=2 && v[3]!=3 && v[0]==3) || (v[6]==4 && v[0]!=7 && v[1]==5) || (v[3]!=3 && v[1]!=6 && v[5]==5) || (v[1]!=2 && v[4]!=7 && v[7]==3);
  } else if (newMode==15) {
    return (v[6]==0 && v[7]==0 && v[3]==0 && v[7]!=3 && v[4]!=0 && v[0]==4) || (v[1]!=7 && v[5]==5 && v[3]==3 && v[5]!=6 && v[7]!=4 && v[3]==7) || (v[7]==3 && v[4]!=4 && v[3]!=1 && v[0]!=5 && v[7]!=5 && v[6]==6) || (v[6]!=2 && v[7]!=7 && v[6]!=6 && v[6]!=6 && v[7]!=4 && v[4]!=2) || (v[0]!=0 && v[6]!=3 && v[0]==3 && v[1]!=7 && v[2]!=1 && v[6]!=1);
  } else if (newMode==16) {
    return (v[6]!=6 && v[7]!=7 && v[5]!=6) || (v[7]==7 && v[3]!=3 && v[0]==3) || (v[2]!=1 && v[1]==3 && v[6]==2) || (v[6]!=2 && v[0]==5 && v[5]==4) || (v[1]!=2 && v[4]!=7 && v[7]==3);
  } else if (newMode==17) {
    return (v[6]!=4 && v[6]!=3 && v[0]==3) || (v[7]!=0 && v[7]!=7 && v[7]!=6) || (v[6]!=6 && v[3]!=3 && v[7]!=7);
  } else if (newMode==18) {
    return (v[7]!=0 && v[7]!=7 && v[1]!=5) || (v[1]!=6 && v[1]!=7 && v[0]==3) || (v[5]!=7 && v[7]!=4 && v[4]==6);
  } else if (newMode==19) {
    return (v[0]==3 && v[6]!=6 && v[7]!=4) || (v[5]!=6 && v[6]!=6 && v[7]!=7) || (v[2]==3 && v[1]!=3 && v[3]==7) || (v[7]==3 && v[3]!=6 && v[2]!=2);
  } else if (newMode==20) {
    return (v[0]==3 && v[6]!=6 && v[7]!=4) || (v[5]!=6 && v[6]!=6 && v[7]!=7) || /*(v[2]==3 && v[1]!=3 && v[3]==7) ||*/ (v[7]==3 && v[3]!=6 && v[2]!=2);
  } else if (newMode==21) {
    return (v[1]!=6 && v[6]!=2 && v[7]==0 && v[0]!=6 && v[1]==7) || (v[5]!=7 && v[2]!=7 && v[6]!=6 && v[2]!=6 && v[5]!=6) || (v[7]==3 && v[7]!=7 && v[6]!=3 && v[1]!=7 && v[3]!=7) || (v[0]==6 && v[4]==3 && v[2]==1 && v[7]==5 && v[6]!=3) || (v[1]!=6 && v[0]!=4 && v[7]!=6 && v[7]!=2 && v[0]==3);
  } else if (newMode==22) {
    return (v[1]!=6 && v[4]==4 && v[5]==5 && v[0]!=1 && v[2]!=7) || (v[5]!=7 && v[2]!=7 && v[6]!=6 && v[2]!=6 && v[5]!=6) || (v[7]==3 && v[4]!=7 && v[1]!=6 && v[1]!=7 && v[6]!=2) || (v[6]==2 && v[7]!=7 && v[4]==5 && v[4]!=5 && v[0]!=4) || (v[1]!=1 && v[3]!=3 && v[7]!=6 && v[3]!=4 && v[0]==3);
  } else if (newMode==23) {
    return (v[0]!=5 && v[5]==3) || (v[5]!=6 && v[1]!=0) || (v[0]!=7 && v[5]==5);
    /**
    !O2  ?  ? 
     ?      ? 
     X3  ?  ? 
     
     ? !+   ? 
     ?      ? 
    !O3  ?  ? 
     
    !@   ?  ? 
     ?      ? 
     O2  ?  ? 
    */
  } else if (newMode==24) {
    return (v[6]==2 && v[2]==4) || (v[2]==3 && v[5]!=6) || (v[5]==3 && v[7]!=4) || (v[1]!=1 && v[0]==3);
    /**
     ?  ?  O1 
     ?      ? 
     ?  X2  ? 
     
     ?  ?  X3 
     ?      ? 
    !O3  ?  ? 
     
     ?  ?  ? 
     ?      ? 
     X3  ? !O1 
     
     X3 !X1  ? 
     ?      ? 
     ?  ?  ? 
    */
  } else if (newMode==25) {
    return (v[6]==2 && v[2]==4) || (v[2]==3 && v[5]!=6) || (v[5]==3 && v[4]!=7) || (v[1]!=1 && v[0]==3);
    /**
    ?  ?  O1 
    ?      ? 
    ?  X2  ? 


    ?  ?  X3 
    ?      ? 
    !O3  ?  ? 


    ?  ?  ? 
    ?     !@  
    X3  ?  ? 


    X3 !X1  ? 
    ?      ? 
    ?  ?  ? 
    */
  } else if (newMode==26) {
    return (v[2]==3 && v[2]!=0) || (v[6]!=0 && v[2]==4) || (v[1]!=3 && v[5]==3) || (v[7]==3 && v[0]!=4);
    /**
    ?  ?  X3 
    ?      ? 
    ?  ?  ? 


    ?  ?  O1 
    ?      ? 
    ? !+   ? 


    ? !X3  ? 
    ?      ? 
    X3  ?  ? 


    !O1  ?  ? 
    ?      ? 
    ?  ?  X3 

    */
  } else if (newMode==27) {
    return (v[0]==3 && v[6]!=6 && v[7]!=4) || (v[5]!=6 && v[6]!=6 && v[7]!=7) || /*(v[2]==3 && v[1]!=3 && v[3]==7) ||*/ (v[7]==3 && v[3]!=6 && v[2]!=2) || (v[0]!=5 && v[5]==3) || (v[5]!=6 && v[1]!=0) || (v[0]!=7 && v[5]==5);
  } else if (newMode==28) {
    return (v[2]==4 && v[0]==1 && v[6]!=5) || (v[7]!=7 && v[7]!=4 && v[6]!=2) || (v[4]!=3 && v[0]==3 && v[3]!=0) || (v[3]==0 && v[4]!=1 && v[2]==2);

    /**
     X1  ?  O1 
     ?      ? 
     ? !O2  ? 
     
     
     ?  ?  ? 
     ?      ? 
     ? !X2 !@ O1 
     
     
     X3  ?  ? 
    !+      !X3 
     ?  ?  ? 
     
     
     ?  ?  X2 
     +      !X1 
     ?  ?  ? */
  } else if (newMode==29) {
    return (v[3]!=6 && v[5]==7 && v[7]==4) || (v[7]!=7 && v[7]!=4 && v[6]!=2) || (v[4]!=4 && v[0]==3 && v[3]!=0) || (v[3]==0 && v[6]==3 && v[1]==1);

    /**
    ?  ?  ? 
    !O3      ? 
    @   ?  O1 


    ?  ?  ? 
    ?      ? 
    ? !X2 !@ O1 


    X3  ?  ? 
    !+      !O1 
    ?  ?  ? 


    ?  X1  ? 
    +       ? 
    ?  X3  ? 
    */
  } else if (newMode==30) {
    (v[0]!=1 && v[0]!=0 && v[6]==1 && v[4]==5 && v[4]==7) || (v[0]!=6 && v[0]==3 && v[3]!=0 && v[6]!=2 && v[2]!=1) || (v[0]!=6 && v[3]==6 && v[6]==2 && v[2]==6 && v[6]!=2) || (v[2]!=5 && v[0]!=3 && v[6]!=2 && v[7]!=7 && v[1]!=4) || (v[4]==3 && v[4]==4 && v[1]==0 && v[0]==3 && v[3]==1);

    /**
     X3  ? !X1 
    !+       ? 
     ? !X2  ? 
     
     
    !O3  ?  O3 
     O3      ? 
     ?  X2  ? 
     
     
    !X3 !O1 !O2 
     ?      ? 
     ? !X2 !@  */
  } else if (newMode==31) {
    // GoTools::print(v);
    return (v[6]==5 && v[7]==2) || (v[4]==3 && v[5]==2 && v[6]==5);
  } else if (newMode==32) {
    // GoTools::print(v);
    return
      (v[0]==4 && v[0]==1 && v[3]==6 && v[1]!=2 && v[2]!=0) || (v[7]!=7 && v[2]!=6 && v[0]!=4 && v[7]!=6 && v[5]!=6) || (v[5]!=5 && v[0]!=5 && v[7]!=1 && v[6]==6 && v[3]!=5) || (v[7]!=1 && v[3]!=0 && v[0]!=6 && v[0]==3 && v[0]!=7);
  } else if (newMode==33) {
    (v[7]==3 && v[6]!=7 ) || (v[1]!=2 && v[5]!=7 && v[3]!=5 && v[5]==3) || (v[2]==2 && v[7]==1 && v[5]!=4 ) || (v[2]!=7 && v[2]==3 && v[4]!=6);
  }

















  else if (newMode==1001) {
    // 0.64
    assert(neighbors.size()==24);
    return (neighbors[18]!=neighbors[22]) && ((neighbors[5] == 1) || (neighbors[16] == 0));
  } else if (newMode==1002) {
    // 0.64
    assert(neighbors.size()==24);
    const Vector<int> &v=neighbors;
    bool a=(v[16]!=v[21]) && ((v[14]==3) && (v[9]==v[17]));
    bool b=(v[16]==1) || (v[17]==v[23]);
    return !(a || b);
  } else if (newMode==1003) {
    // 0.64
    assert(neighbors.size()==24);
    return (neighbors[16]==neighbors[7]) && ((neighbors[11] == neighbors[12]) || (neighbors[23] == neighbors[7]) || (neighbors[17] == neighbors[7]));
  } else if (newMode==1004) {
    // 0.64
    assert(neighbors.size()==24);
    const Vector<int> &v=neighbors;
    bool a=!(v[3]==0 && v[16] != v[0]);
    bool b=v[11]==v[12];
    bool c=!(v[21]!=0 && v[9]==v[17]);
    bool d=v[9]==3;
    return ((a && b) || (c && d)) && (v[17]!=3);
  } else if (newMode==1005) {
    // 0.64
    assert(neighbors.size()==24);
    const Vector<int> &v=neighbors;
    bool a=!(v[5]==0 && v[16] != v[0]);
    bool b=v[11]==v[12];
    bool c=!(v[13]==0 && v[9]==v[3]);
    bool d=v[23]==3;
    return ((a && b) || (c && d)) && (v[17]!=3);
  } else if (newMode==1006) {
    // 0.64
    assert(neighbors.size()==24);
    return (v[11]==2 && v[2]==0 && v[21]==3 && v[7]!=1 && v[21]!=1 && v[13]!=3 && v[19]==0 && v[22]!=2 && v[14]==3 && v[15]!=2) || (v[10]==2 && v[12]==0 && v[20]!=1 && v[13]==0 && v[0]!=2 && v[8]==3 && v[4]!=2 && v[7]!=0 && v[18]==3 && v[23]!=2) || (v[23]==0 && v[9]==0 && v[12]==0 && v[14]!=1 && v[21]!=2 && v[14]!=2 && v[21]==2 && v[1]!=2 && v[15]!=0 && v[0]==3) || (v[4]!=2 && v[22]!=3 && v[0]==0 && v[23]==2 && v[3]==0 && v[16]==2 && v[5]==3 && v[12]==0 && v[11]==3 && v[10]==0) || (v[23]!=0 && v[12]!=3 && v[6]!=3 && v[1]!=3 && v[1]!=2 && v[7]!=2 && v[11]!=3 && v[17]!=3 && v[10]!=3 && v[22]!=1);
  } else if (newMode==1007) {
    // 0.64
    assert(neighbors.size()==24);
    return (v[23]==3 && v[12]==2 && v[6]==3) || (v[1]!=2 && v[3]==1 && v[17]==1) || (v[5]!=3 && v[12]==0 && v[17]==0) || (v[4]==2 && v[16]==0 && v[16]==3) || (v[1]==1 && v[10]!=0 && v[2]!=3);
  } else {
    assert(0);
    return false;
  }

  return false;
}

